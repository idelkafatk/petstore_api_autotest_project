plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.11.2"
    id "io.freefair.lombok" version "6.6.1"
}

repositories {
    mavenCentral()
}

def selenideVersion = "6.10.3",
    junitVersion = "5.8.2",
    slf4jVersion = "2.0.6",
    javaFakerVersion = "1.0.2",
    allureVersion = "2.20.1",
    ownerVersion = "1.0.12",
    restAssuredVersion = "5.3.0",
    assertjVersion = "3.23.1",
    jsonPathVersion = "2.7.0",
    jacksonVersion = "2.14.1"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "com.github.javafaker:javafaker:$javaFakerVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "com.jayway.jsonpath:json-path:$jsonPathVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "org.junit.platform:junit-platform-engine:1.9.1"
    )
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'custom',
                'junit.jupiter.execution.parallel.config.custom.class'     : 'fatk.idelka.parallel.CustomStrategy'
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}